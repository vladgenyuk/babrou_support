"""db_init

Revision ID: 18a499df26d0
Revises: 
Create Date: 2025-02-14 16:19:57.769113

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '18a499df26d0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('orders',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('product_name', sa.String(length=100), nullable=True),
    sa.Column('price', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('cost', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('stock', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('orders_products',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('order_id', sa.BigInteger(), nullable=False),
    sa.Column('product_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""CREATE OR REPLACE FUNCTION create_order_with_products(
    p_product_ids BIGINT[],       
    p_amounts INT[],              
    p_order_created_at TIMESTAMP  
) 
RETURNS BIGINT 
LANGUAGE plpgsql
AS $$
DECLARE
    v_order_id BIGINT;            
    v_product_id BIGINT;          
    v_amount INT;                 
    v_index INT := 1;             
    v_product_exists BOOLEAN;     
BEGIN
    -- Validate that the lengths of product_ids and amounts match
    IF array_length(p_product_ids, 1) != array_length(p_amounts, 1) THEN
        RAISE EXCEPTION 'The lengths of product_ids and amounts must match.';
    END IF;

    -- Insert a new order into the orders table
    INSERT INTO orders (created_at)
    VALUES (p_order_created_at)
    RETURNING id INTO v_order_id;

    -- Loop through the product IDs and amounts
    WHILE v_index <= array_length(p_product_ids, 1) LOOP
        v_product_id := p_product_ids[v_index];
        v_amount := p_amounts[v_index];

        -- Check if the product exists in the products table
        SELECT EXISTS (SELECT 1 FROM products WHERE id = v_product_id)
        INTO v_product_exists;

        -- If the product does not exist, raise an exception
        IF NOT v_product_exists THEN
            RAISE EXCEPTION 'Product with ID % does not exist.', v_product_id;
        END IF;

        -- Insert into orders_products table
        INSERT INTO orders_products (order_id, product_id, amount, created_at)
        VALUES (v_order_id, v_product_id, v_amount, p_order_created_at);

        -- Increment the index
        v_index := v_index + 1;
    END LOOP;

    -- Return the newly created order ID
    RETURN v_order_id;
EXCEPTION
    -- Raise an exception in case of any error
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Error creating order: %', SQLERRM;
END;
$$;""")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('orders_products')
    op.drop_table('products')
    op.drop_table('orders')
    # ### end Alembic commands ###
